;
; jsimdcfg.inc --- generated by makecfg.c (Feb 17 2015, 00:13:46)
;

%define JSIMDCFG_INCLUDED	; so that jsimdcfg.inc doesn't do it again


; ---- macros for structure access -----------------------------------------

; struct jpeg_compress_struct

%define jcstruct_image_width(b)         ((b) +  28) ; cinfo->image_width
%define jcstruct_max_v_samp_factor(b)   ((b) + 220) ; cinfo->max_v_samp_factor

; struct jpeg_decompress_struct

%define jdstruct_output_width(b)        ((b) +  92) ; cinfo->output_width
%define jdstruct_max_v_samp_factor(b)   ((b) + 276) ; cinfo->max_v_samp_factor
%define jdstruct_sample_range_limit(b)  ((b) + 288) ; cinfo->sample_range_limit

; jpeg_component_info

%define jcompinfo_v_samp_factor(b)      ((b) + 12) ; compptr->v_samp_factor
%define jcompinfo_width_in_blocks(b)    ((b) + 28) ; compptr->width_in_blocks
%define jcompinfo_downsampled_width(b)  ((b) + 40) ; compptr->downsampled_width
%define jcompinfo_dct_table(b)          ((b) + 80) ; compptr->dct_table


; ---- macros from jconfig.h -----------------------------------------------

%undef NEED_SHORT_EXTERNAL_NAMES	; Use short forms of external names


; ---- macros from jmorecfg.h ----------------------------------------------

; Capability options common to encoder and decoder:

%define DCT_ISLOW_SUPPORTED	; slow but accurate integer algorithm
%define DCT_IFAST_SUPPORTED	; faster, less accurate integer method
%define DCT_FLOAT_SUPPORTED	; floating-point: accurate, fast on fast HW

; Decoder capability options:

%define IDCT_SCALING_SUPPORTED		; Output rescaling via IDCT?
%define UPSAMPLE_MERGING_SUPPORTED	; Fast path for sloppy upsampling?
%define UPSAMPLE_H1V2_SUPPORTED		; Fast/fancy processing for 1h2v?

; Ordering of RGB data in scanlines passed to or from the application.

%define RGB_RED		2	; Offset of Red in an RGB scanline element
%define RGB_GREEN	1	; Offset of Green
%define RGB_BLUE	0	; Offset of Blue
%define RGB_PIXELSIZE	4	; JSAMPLEs per RGB scanline element

%define RGBX_FILLER_0XFF	; fill dummy bytes with 0xFF in RGBX format

; SIMD support options (encoder):

%define JCCOLOR_RGBYCC_MMX_SUPPORTED	; RGB->YCC conversion with MMX
%define JCCOLOR_RGBYCC_SSE2_SUPPORTED	; RGB->YCC conversion with SSE2
%define JCSAMPLE_MMX_SUPPORTED		; downsampling with MMX
%define JCSAMPLE_SSE2_SUPPORTED		; downsampling with SSE2
%define JFDCT_INT_MMX_SUPPORTED		; forward DCT with MMX
%define JFDCT_INT_SSE2_SUPPORTED	; forward DCT with SSE2
%define JFDCT_FLT_3DNOW_MMX_SUPPORTED	; forward DCT with 3DNow!/MMX
%define JFDCT_FLT_SSE_MMX_SUPPORTED	; forward DCT with SSE/MMX
%define JFDCT_FLT_SSE_SSE2_SUPPORTED	; forward DCT with SSE/SSE2
%undef JFDCT_INT_QUANTIZE_WITH_DIVISION ; Use general quantization method

; SIMD support options (decoder):

%define JDCOLOR_YCCRGB_MMX_SUPPORTED	; YCC->RGB conversion with MMX
%define JDCOLOR_YCCRGB_SSE2_SUPPORTED	; YCC->RGB conversion with SSE2
%define JDMERGE_MMX_SUPPORTED		; merged upsampling with MMX
%define JDMERGE_SSE2_SUPPORTED		; merged upsampling with SSE2
%define JDSAMPLE_FANCY_MMX_SUPPORTED	; fancy upsampling with MMX
%define JDSAMPLE_FANCY_SSE2_SUPPORTED	; fancy upsampling with SSE2
%define JDSAMPLE_SIMPLE_MMX_SUPPORTED	; sloppy upsampling with MMX
%define JDSAMPLE_SIMPLE_SSE2_SUPPORTED	; sloppy upsampling with SSE2
%define JIDCT_INT_MMX_SUPPORTED		; inverse DCT with MMX
%define JIDCT_INT_SSE2_SUPPORTED	; inverse DCT with SSE2
%define JIDCT_FLT_3DNOW_MMX_SUPPORTED	; inverse DCT with 3DNow!/MMX
%define JIDCT_FLT_SSE_MMX_SUPPORTED	; inverse DCT with SSE/MMX
%define JIDCT_FLT_SSE_SSE2_SUPPORTED	; inverse DCT with SSE/SSE2


; ---- macros from jpeglib.h ----------------------------------------------

; Version ID for the JPEG library.
; Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".

%define JPEG_LIB_VERSION  62

; SIMD Ext: Version ID for the SIMD extension.

%define JPEG_SIMDEXT_VERSION  102
%define JPEG_SIMDEXT_VER_STR  "1.02"

